name: Web CI/CD

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging, develop]

# Concurrency control to prevent parallel runs on same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions for security
permissions:
  contents: read
  id-token: write
  deployments: write
  security-events: write
  actions: read
  checks: write

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint
        
      - name: Run Prettier check
        run: pnpm format --check
        
      - name: Run TypeScript check
        run: pnpm typecheck

  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules/.cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:coverage

      - name: Run E2E tests
        run: pnpm test:e2e

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 14

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            dist
            node_modules/.vite
          key: ${{ runner.os }}-build-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      ${{ github.ref == 'refs/heads/main' && 'production' || 
          github.ref == 'refs/heads/staging' && 'staging' || 
          'development' }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Datadog monitoring
        uses: datadog/action-metrics@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 
                         github.ref == 'refs/heads/staging' && 'staging' || 
                         'development' }}

      # Production deployment with canary
      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        env:
          DEPLOY_PERCENTAGE: 10
        run: |
          # Canary deployment logic
          aws s3 sync dist/ s3://${{ secrets.PROD_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PROD_CF_DIST }}

      # Staging deployment with blue-green
      - name: Deploy to staging
        if: github.ref == 'refs/heads/staging'
        run: |
          # Blue-green deployment logic
          aws s3 sync dist/ s3://${{ secrets.STAGING_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CF_DIST }}

      # Development deployment
      - name: Deploy to development
        if: github.ref == 'refs/heads/develop'
        run: |
          aws s3 sync dist/ s3://${{ secrets.DEV_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CF_DIST }}

      - name: Run smoke tests
        run: |
          curl -f ${{ secrets.DEPLOY_URL }}/_health
          curl -f ${{ secrets.DEPLOY_URL }}/version.json

      - name: Monitor deployment
        run: |
          # Monitor deployment health for specified duration based on environment
          MONITOR_DURATION=${{ github.ref == 'refs/heads/main' && '3600' || 
                             github.ref == 'refs/heads/staging' && '1800' || 
                             '900' }}
          # Monitoring implementation

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = ${{ job.status == 'success' }} ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: status,
              environment_url: process.env.DEPLOY_URL
            });