name: Backend CI/CD

on:
  push:
    branches: ['main', 'staging']
  pull_request:
    branches: ['main', 'staging']
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  DEPLOYMENT_TIMEOUT: 30
  ERROR_NOTIFICATION_WEBHOOK: ${{ secrets.ERROR_WEBHOOK }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile
          pnpm audit

      - name: Run linting
        run: pnpm lint
        
      - name: Type checking
        run: pnpm typecheck

      - name: Run tests with coverage
        run: pnpm test:coverage
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/
          retention-days: 7

  build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Build Edge Functions
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: edge-functions
          path: dist/
          retention-days: 7

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: edge-functions
          path: dist/

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy to staging
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run health checks
        run: |
          curl -f ${{ secrets.STAGING_HEALTH_CHECK_URL }}
          
      - name: Verify regional deployments
        run: |
          for region in us-east-1 eu-west-1 ap-southeast-1; do
            curl -f "${{ secrets.STAGING_HEALTH_CHECK_URL }}?region=$region"
          done

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: edge-functions
          path: dist/

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy to production
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PROD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run health checks
        run: |
          curl -f ${{ secrets.PROD_HEALTH_CHECK_URL }}
          
      - name: Verify regional deployments
        run: |
          for region in us-east-1 eu-west-1 ap-southeast-1 sa-east-1; do
            curl -f "${{ secrets.PROD_HEALTH_CHECK_URL }}?region=$region"
          done

      - name: Send deployment notification
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const webhook = '${{ env.ERROR_NOTIFICATION_WEBHOOK }}'
            const message = {
              text: `Production deployment ${status}: ${process.env.GITHUB_REPOSITORY}@${process.env.GITHUB_SHA}`
            }
            await fetch(webhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(message)
            })